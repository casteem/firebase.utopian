#!/usr/bin/env node

// import express app setup.
const app = require('../dist/server')

// debug mode.
let debug = require('debug')('api:server')

// require a http server instance.
let http = require('http')

// get the port to listen to requires, defaulting to 3000.
let port = normalizePort(process.env.PORT || '3000')

// set the port on the app instance.
app.set('port', port)

// create the http server, using the app as handler.
let server = http.createServer(app)

// listen for connections on the server.
server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  let port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      /* eslint-disable-next-line */
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      /* eslint-disable-next-line */
      break
    default:
      // console.error(error)
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  let address = server.address()
  let bind = typeof address === 'string'
    ? 'pipe ' + address
    : 'port ' + address.port
  debug('Listening on ' + bind)
}
